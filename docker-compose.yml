version: '3.8'

services:
  daemon:
    build:
      context: .
      dockerfile: Dockerfile.daemon
    env_file:
      - .env.docker
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - batches_data:/app/batches
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    stop_grace_period: 10s
    stop_signal: SIGTERM

  bankai-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    env_file:
      - .env.docker
    depends_on:
      - db
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - bankai-network

  db:
    image: postgres:15-alpine
    env_file:
      - .env.docker
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/POSTGRES/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # -- Loki service --
  loki:
    image: grafana/loki:3.0.0
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yaml:/etc/loki/config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/config.yaml
    restart: unless-stopped
    networks:
      - monitoring

  # -- Promtail service --
  promtail:
    image: grafana/promtail:3.4.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail/config.yaml:/etc/promtail/config.yaml:ro
      - promtail_positions:/tmp
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - monitoring

  # -- Grafana service --
  grafana:
    image: grafana/grafana:11.6.1
    depends_on:
      - loki
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-secret}
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring

  # -- Prometheus service --
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    networks:
      - monitoring

  # -- Nginx Reverse Proxy --
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro # Site configurations
      - ./nginx/certs:/etc/letsencrypt      # For SSL certificates (Certbot convention)
      - ./nginx/www:/var/www/certbot        # For Let's Encrypt challenges
    depends_on:
      - bankai-api
      - grafana
      # - prometheus # Removed, not proxied directly
    networks:
      - bankai-network
      - monitoring
    restart: unless-stopped

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot

volumes:
  postgres_data:
    name: postgres_data
  batches_data:
    name: batches_data
  loki_data:
    name: loki_data
  promtail_positions:
    name: promtail_positions
  grafana_data:
    name: grafana_data

networks:
  bankai-network:
    driver: bridge
  monitoring:
    driver: bridge
